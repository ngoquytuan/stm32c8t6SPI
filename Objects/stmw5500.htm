<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\stmw5500.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\stmw5500.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6120001: Last Updated: Sat Aug  3 09:13:42 2019
<BR><P>
<H3>Maximum Stack Usage =        888 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
httpServer_run &rArr; http_get_cgi_handler &rArr; predefined_get_cgi_processor &rArr; make_json_netinfo &rArr; ctlnetwork &rArr; wizchip_setnetmode &rArr; WIZCHIP_WRITE
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[26]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[e]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">BusFault_Handler</a><BR>
 <LI><a href="#[c]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">HardFault_Handler</a><BR>
 <LI><a href="#[d]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">MemManage_Handler</a><BR>
 <LI><a href="#[f]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">UsageFault_Handler</a><BR>
 <LI><a href="#[de]">send_cmd</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[de]">send_cmd</a><BR>
 <LI><a href="#[bb]">chk_chr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bb]">chk_chr</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[26]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">BusFault_Handler</a> from stm32f10x_it.o(.text.BusFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">DebugMon_Handler</a> from stm32f10x_it.o(.text.DebugMon_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[50]">EE_ReadVariable</a> from eeprom_stm.o(.text.EE_ReadVariable) referenced from main.o(.text.test_eeprom)
 <LI><a href="#[4d]">EE_WriteVariable</a> from eeprom_stm.o(.text.EE_WriteVariable) referenced from httputil.o(.text.saveip)
 <LI><a href="#[4d]">EE_WriteVariable</a> from eeprom_stm.o(.text.EE_WriteVariable) referenced from main.o(.text.test_eeprom)
 <LI><a href="#[1a]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3c]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1c]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">EXTI3_IRQHandler</a> from main.o(.text.EXTI3_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[43]">GPIO_PinConfigure</a> from gpio_stm32f10x.o(.text.GPIO_PinConfigure) referenced from rcchandler.o(.text.GPIO_config)
 <LI><a href="#[c]">HardFault_Handler</a> from stm32f10x_it.o(.text.HardFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[35]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[45]">IWDG_ReloadCounter</a> from stm32f10x_iwdg.o(.text.IWDG_ReloadCounter) referenced from main.o(.text.loadwebpages)
 <LI><a href="#[d]">MemManage_Handler</a> from stm32f10x_it.o(.text.MemManage_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">NMI_Handler</a> from stm32f10x_it.o(.text.NMI_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">PendSV_Handler</a> from stm32f10x_it.o(.text.PendSV_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3d]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[38]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">SVC_Handler</a> from stm32f10x_it.o(.text.SVC_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">SysTick_Handler</a> from main.o(.text.SysTick_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[40]">SystemInit</a> from system_stm32f10x.o(.text.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[16]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">TIM2_IRQHandler</a> from timerhandler.o(.text.TIM2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">TIM3_IRQHandler</a> from stm32f10x_it.o(.text.TIM3_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[39]">USART1_IRQHandler</a> from stm32f10x_it.o(.text.USART1_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3a]">USART2_IRQHandler</a> from stm32f10x_it.o(.text.USART2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3b]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3e]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">UsageFault_Handler</a> from stm32f10x_it.o(.text.UsageFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[57]">WIZCHIP_READ</a> from w5500.o(.text.WIZCHIP_READ) referenced from wizchip_conf.o(.text.wizchip_gettimeout)
 <LI><a href="#[59]">WIZCHIP_READ_BUF</a> from w5500.o(.text.WIZCHIP_READ_BUF) referenced from wizchip_conf.o(.text.wizchip_sw_reset)
 <LI><a href="#[58]">WIZCHIP_WRITE</a> from w5500.o(.text.WIZCHIP_WRITE) referenced from wizchip_conf.o(.text.wizchip_settimeout)
 <LI><a href="#[5a]">WIZCHIP_WRITE_BUF</a> from w5500.o(.text.WIZCHIP_WRITE_BUF) referenced from wizchip_conf.o(.text.wizchip_sw_reset)
 <LI><a href="#[14]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[42]">__2printf</a> from printf8.o(i.__0printf$8) referenced from w5500init.o(.text.Display_Net_Conf)
 <LI><a href="#[42]">__2printf</a> from printf8.o(i.__0printf$8) referenced from httpserver.o(.text.display_reg_webContent_list)
 <LI><a href="#[42]">__2printf</a> from printf8.o(i.__0printf$8) referenced from httpserver.o(.text.httpServer_run)
 <LI><a href="#[44]">__NVIC_SystemReset</a> from main.o(.text.__NVIC_SystemReset) referenced from main.o(.text.loadwebpages)
 <LI><a href="#[41]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[5c]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[8]">currentUptime</a> from snmp.o(.text.currentUptime) referenced 2 times from snmp_custom.o(.data.snmpData)
 <LI><a href="#[0]">default_mcu_reset</a> from httpserver.o(.text.default_mcu_reset) referenced 2 times from httpserver.o(.data..L_MergedGlobals)
 <LI><a href="#[1]">default_wdt_reset</a> from httpserver.o(.text.default_wdt_reset) referenced 2 times from httpserver.o(.data..L_MergedGlobals)
 <LI><a href="#[5b]">fputc</a> from main.o(.text.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[9]">get_LEDStatus_all</a> from snmp_custom.o(.text.get_LEDStatus_all) referenced 2 times from snmp_custom.o(.data.snmpData)
 <LI><a href="#[47]">httpServer_run</a> from httpserver.o(.text.httpServer_run) referenced from main.o(.text.networkSevices)
 <LI><a href="#[3f]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[48]">parseTLV</a> from snmp.o(.text.parseTLV) referenced from snmp.o(.text.parseRequest)
 <LI><a href="#[46]">reg_httpServer_webContent</a> from httpserver.o(.text.reg_httpServer_webContent) referenced from main.o(.text.loadwebpages)
 <LI><a href="#[4e]">stm32_spi_rw</a> from spiconfig.o(.text.stm32_spi_rw) referenced from mmcstm32.o(.text.send_cmd)
 <LI><a href="#[4e]">stm32_spi_rw</a> from spiconfig.o(.text.stm32_spi_rw) referenced from mmcstm32.o(.text.xmit_datablock)
 <LI><a href="#[4f]">strlen</a> from strlen.o(.text) referenced from snmp.o(.text.snmp_sendTrap)
 <LI><a href="#[6]">wizchip_bus_readdata</a> from wizchip_conf.o(.text.wizchip_bus_readdata) referenced 2 times from wizchip_conf.o(.data.WIZCHIP)
 <LI><a href="#[7]">wizchip_bus_writedata</a> from wizchip_conf.o(.text.wizchip_bus_writedata) referenced 2 times from wizchip_conf.o(.data.WIZCHIP)
 <LI><a href="#[2]">wizchip_cris_enter</a> from wizchip_conf.o(.text.wizchip_cris_enter) referenced 2 times from wizchip_conf.o(.data.WIZCHIP)
 <LI><a href="#[3]">wizchip_cris_exit</a> from wizchip_conf.o(.text.wizchip_cris_exit) referenced 2 times from wizchip_conf.o(.data.WIZCHIP)
 <LI><a href="#[5]">wizchip_cs_deselect</a> from wizchip_conf.o(.text.wizchip_cs_deselect) referenced 2 times from wizchip_conf.o(.data.WIZCHIP)
 <LI><a href="#[5]">wizchip_cs_deselect</a> from wizchip_conf.o(.text.wizchip_cs_deselect) referenced from wizchip_conf.o(.text.reg_wizchip_cs_cbfunc)
 <LI><a href="#[4]">wizchip_cs_select</a> from wizchip_conf.o(.text.wizchip_cs_select) referenced 2 times from wizchip_conf.o(.data.WIZCHIP)
 <LI><a href="#[4]">wizchip_cs_select</a> from wizchip_conf.o(.text.wizchip_cs_select) referenced from wizchip_conf.o(.text.reg_wizchip_cs_cbfunc)
 <LI><a href="#[52]">wizchip_deselect</a> from w5500init.o(.text.wizchip_deselect) referenced from w5500init.o(.text.w5500_lib_init)
 <LI><a href="#[53]">wizchip_read</a> from spiconfig.o(.text.wizchip_read) referenced from w5500init.o(.text.w5500_lib_init)
 <LI><a href="#[55]">wizchip_readburst</a> from spiconfig.o(.text.wizchip_readburst) referenced from w5500init.o(.text.w5500_lib_init)
 <LI><a href="#[51]">wizchip_select</a> from w5500init.o(.text.wizchip_select) referenced from w5500init.o(.text.w5500_lib_init)
 <LI><a href="#[4c]">wizchip_spi_readburst</a> from wizchip_conf.o(.text.wizchip_spi_readburst) referenced from wizchip_conf.o(.text.reg_wizchip_spiburst_cbfunc)
 <LI><a href="#[4a]">wizchip_spi_readbyte</a> from wizchip_conf.o(.text.wizchip_spi_readbyte) referenced from wizchip_conf.o(.text.reg_wizchip_spi_cbfunc)
 <LI><a href="#[4b]">wizchip_spi_writeburst</a> from wizchip_conf.o(.text.wizchip_spi_writeburst) referenced from wizchip_conf.o(.text.reg_wizchip_spiburst_cbfunc)
 <LI><a href="#[49]">wizchip_spi_writebyte</a> from wizchip_conf.o(.text.wizchip_spi_writebyte) referenced from wizchip_conf.o(.text.reg_wizchip_spi_cbfunc)
 <LI><a href="#[54]">wizchip_write</a> from spiconfig.o(.text.wizchip_write) referenced from w5500init.o(.text.w5500_lib_init)
 <LI><a href="#[56]">wizchip_writeburst</a> from spiconfig.o(.text.wizchip_writeburst) referenced from w5500init.o(.text.w5500_lib_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[41]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[156]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[5d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[70]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[157]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[158]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[159]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[15a]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[15b]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[a]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>localtime</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, localtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[5f]"></a>ctime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ctime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ctime &rArr; asctime
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12a]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmp_sendTrap
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseVersion
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseVarBind
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSequenceOf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSequence
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSNMPMessage
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseRequest
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseCommunity
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_header
</UL>

<P><STRONG><a name="[15c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[15e]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_body
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpd_run
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[124]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_http_response_head
</UL>

<P><STRONG><a name="[ef]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mid
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_param_value
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_http_uri_type
</UL>

<P><STRONG><a name="[fd]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_userReg_webContent
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mid
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_param_value
</UL>

<P><STRONG><a name="[fc]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_param_value
</UL>

<P><STRONG><a name="[4f]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_httpServer_webContent
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmp_sendTrap
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeTrapVariableBindings
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEntry
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_userReg_webContent
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_header
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mid
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_http_response_head
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_param_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> snmp.o(.text.snmp_sendTrap)
</UL>
<P><STRONG><a name="[f1]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;predefined_set_cgi_processor
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;predefined_get_cgi_processor
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_post_cgi_handler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_cgi_handler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_userReg_webContent
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_http_request
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_uri_name
</UL>

<P><STRONG><a name="[ed]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseCommunity
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findEntry
</UL>

<P><STRONG><a name="[100]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_httpServer_webContent
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_body
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_http_request
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_http_response_head
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr_
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_uri_name
</UL>

<P><STRONG><a name="[101]"></a>strtok</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_http_request
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr_
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_uri_name
</UL>

<P><STRONG><a name="[65]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_FATFS_GetDriveSize
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTPUDP
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_FATFS_GetDriveSize
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_l2d</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTPUDP
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_FATFS_GetDriveSize
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTPUDP
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[161]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>asctime</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, asctime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = asctime
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[66]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[162]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[68]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[5e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[163]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[164]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>ATOI</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, httpparser.o(.text.ATOI))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ATOI
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2D
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_diostate
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_diodir
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr_
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_param_value
</UL>

<P><STRONG><a name="[e]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[149]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_wizchip_dma_transfer
</UL>

<P><STRONG><a name="[147]"></a>DMA_DeInit</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_wizchip_dma_transfer
</UL>

<P><STRONG><a name="[14b]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text.DMA_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_wizchip_dma_transfer
</UL>

<P><STRONG><a name="[148]"></a>DMA_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f10x_dma.o(.text.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_wizchip_dma_transfer
</UL>

<P><STRONG><a name="[11]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>Display_Net_Conf</STRONG> (Thumb, 320 bytes, Stack size 56 bytes, w5500init.o(.text.Display_Net_Conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Display_Net_Conf &rArr; ctlwizchip &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Conf
</UL>

<P><STRONG><a name="[79]"></a>EE_Init</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, eeprom_stm.o(.text.EE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EE_Init &rArr; EE_VerifyPageFullWriteVariable &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadVariable
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Format
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_eeprom_stm32
</UL>

<P><STRONG><a name="[50]"></a>EE_ReadVariable</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, eeprom_stm.o(.text.EE_ReadVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EE_ReadVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteVariable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.test_eeprom)
</UL>
<P><STRONG><a name="[4d]"></a>EE_WriteVariable</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, eeprom_stm.o(.text.EE_WriteVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EE_WriteVariable &rArr; EE_VerifyPageFullWriteVariable &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadVariable
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text.test_eeprom)
<LI> httputil.o(.text.saveip)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(.text.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[7c]"></a>EXTI_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[85]"></a>EXTI_Init</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_config
</UL>

<P><STRONG><a name="[77]"></a>FLASH_ErasePage</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteVariable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Format
</UL>

<P><STRONG><a name="[7f]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text.FLASH_GetBank1Status))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[78]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text.FLASH_ProgramHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteVariable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Format
</UL>

<P><STRONG><a name="[14c]"></a>FLASH_Unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_eeprom_stm32
</UL>

<P><STRONG><a name="[7e]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[84]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_config
</UL>

<P><STRONG><a name="[80]"></a>GPIO_GetPortClockState</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, gpio_stm32f10x.o(.text.GPIO_GetPortClockState))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
</UL>

<P><STRONG><a name="[99]"></a>GPIO_Init</STRONG> (Thumb, 184 bytes, Stack size 28 bytes, stm32f10x_gpio.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[43]"></a>GPIO_PinConfigure</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, gpio_stm32f10x.o(.text.GPIO_PinConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClock
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPortClockState
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rcchandler.o(.text.GPIO_config)
</UL>
<P><STRONG><a name="[81]"></a>GPIO_PortClock</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, gpio_stm32f10x.o(.text.GPIO_PortClock))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_config
</UL>

<P><STRONG><a name="[9a]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[82]"></a>GPIO_config</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, rcchandler.o(.text.GPIO_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClock
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>IWDG_Config</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, rcchandler.o(.text.IWDG_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IWDG_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClearFlag
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>IWDG_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text.IWDG_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[45]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.loadwebpages)
</UL>
<P><STRONG><a name="[8a]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text.IWDG_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[8b]"></a>IWDG_SetReload</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text.IWDG_SetReload))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[89]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text.IWDG_WriteAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[d]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>NTPUDP</STRONG> (Thumb, 420 bytes, Stack size 40 bytes, ntpserver.o(.text.NTPUDP))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = NTPUDP &rArr; wzn_event_handle &rArr; ctlwizchip &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wzn_event_handle
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;networkSevices
</UL>

<P><STRONG><a name="[83]"></a>NVIC_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, misc.o(.text.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_UART_NVIC
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Configuration
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_config
</UL>

<P><STRONG><a name="[b6]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc.o(.text.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_UART_NVIC
</UL>

<P><STRONG><a name="[93]"></a>Net_Conf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, w5500init.o(.text.Net_Conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Net_Conf &rArr; Display_Net_Conf &rArr; ctlwizchip &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Net_Conf
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_lib_init
</UL>

<P><STRONG><a name="[94]"></a>PHYStatus_Check</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, w5500init.o(.text.PHYStatus_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PHYStatus_Check &rArr; ctlwizchip &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklink
</UL>

<P><STRONG><a name="[12]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[a7]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Configuration
</UL>

<P><STRONG><a name="[b4]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[98]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[b3]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[88]"></a>RCC_ClearFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text.RCC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[b5]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[87]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text.RCC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[11e]"></a>SNTP_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sntp.o(.text.SNTP_init))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>SNTP_run</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, sntp.o(.text.SNTP_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SNTP_run &rArr; recvfrom &rArr; wiz_recv_data &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>SPI1_Init</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, spiconfig.o(.text.SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SPI1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>SPI_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[14a]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text.SPI_I2S_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_wizchip_dma_transfer
</UL>

<P><STRONG><a name="[144]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_write
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_read
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_rw
</UL>

<P><STRONG><a name="[146]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_write
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_read
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_rw
</UL>

<P><STRONG><a name="[145]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_write
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_read
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_rw
</UL>

<P><STRONG><a name="[9b]"></a>SPI_Init</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text.SPI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[10]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SysTick_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[119]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, system_stm32f10x.o(.text.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>SystemInit</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, system_stm32f10x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[30]"></a>TIM2_IRQHandler</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, timerhandler.o(.text.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_timerproc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.TIM3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[a0]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[aa]"></a>TIM_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Configuration
</UL>

<P><STRONG><a name="[9e]"></a>TIM_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[ab]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Configuration
</UL>

<P><STRONG><a name="[a9]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text.TIM_PrescalerConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Configuration
</UL>

<P><STRONG><a name="[a8]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Configuration
</UL>

<P><STRONG><a name="[a2]"></a>TM_FATFS_GetDriveSize</STRONG> (Thumb, 420 bytes, Stack size 416 bytes, stm32f1fatfs.o(.text.TM_FATFS_GetDriveSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = TM_FATFS_GetDriveSize &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; stm32_wizchip_dma_transfer &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a6]"></a>Timer_Configuration</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, timerhandler.o(.text.Timer_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Timer_Configuration &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerConfig
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[39]"></a>USART1_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_it.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>USART1_Init</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, uarthandler.o(.text.USART1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART1_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_UART_NVIC
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClock
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a]"></a>USART2_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f10x_it.o(.text.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>USART_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[ae]"></a>USART_DeInit</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[f5]"></a>USART_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[ac]"></a>USART_GetITStatus</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text.USART_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b0]"></a>USART_ITConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text.USART_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[af]"></a>USART_Init</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, stm32f10x_usart.o(.text.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[f6]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[b2]"></a>USER_UART_NVIC</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uarthandler.o(.text.USER_UART_NVIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USER_UART_NVIC &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[f]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>WIZCHIP_READ</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, w5500.o(.text.WIZCHIP_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpd_run
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNTP_run
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTPUDP
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wzn_event_handle
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_ignore
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphypmode
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphypmode
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphylink
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphyconf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetmode
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getnetmode
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getinterruptmask
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getinterrupt
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.text.wizchip_gettimeout)
</UL>
<P><STRONG><a name="[59]"></a>WIZCHIP_READ_BUF</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, w5500.o(.text.WIZCHIP_READ_BUF))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WIZCHIP_READ_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.text.wizchip_sw_reset)
</UL>
<P><STRONG><a name="[58]"></a>WIZCHIP_WRITE</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, w5500.o(.text.WIZCHIP_WRITE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wzn_event_handle
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_ignore
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphypmode
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphyconf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetmode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setinterruptmask
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_clrinterrupt
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.text.wizchip_settimeout)
</UL>
<P><STRONG><a name="[5a]"></a>WIZCHIP_WRITE_BUF</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, w5500.o(.text.WIZCHIP_WRITE_BUF))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WIZCHIP_WRITE_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.text.wizchip_sw_reset)
</UL>
<P><STRONG><a name="[ba]"></a>checklink</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, w5500init.o(.text.checklink))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = checklink &rArr; PHYStatus_Check &rArr; ctlwizchip &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHYStatus_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;networkSevices
</UL>

<P><STRONG><a name="[96]"></a>close</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, socket.o(.text.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = close &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNTP_run
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmp_sendTrap
</UL>

<P><STRONG><a name="[74]"></a>ctlnetwork</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, wizchip_conf.o(.text.ctlnetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ctlnetwork &rArr; wizchip_setnetmode &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_settimeout
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetmode
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetinfo
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_gettimeout
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getnetmode
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getnetinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Conf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Net_Conf
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_json_netinfo
</UL>

<P><STRONG><a name="[75]"></a>ctlwizchip</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, wizchip_conf.o(.text.ctlwizchip))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ctlwizchip &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphypmode
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphyconf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphypmode
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphylink
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphyconf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setinterruptmask
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getinterruptmask
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getinterrupt
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_clrinterrupt
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_lib_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wzn_event_handle
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHYStatus_Check
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Net_Conf
</UL>

<P><STRONG><a name="[8]"></a>currentUptime</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, snmp.o(.text.currentUptime))
<BR>[Address Reference Count : 1]<UL><LI> snmp_custom.o(.data.snmpData)
</UL>
<P><STRONG><a name="[0]"></a>default_mcu_reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, httpserver.o(.text.default_mcu_reset))
<BR>[Address Reference Count : 1]<UL><LI> httpserver.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[1]"></a>default_wdt_reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, httpserver.o(.text.default_wdt_reset))
<BR>[Address Reference Count : 1]<UL><LI> httpserver.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[11c]"></a>delay_ms</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, delay.o(.text.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_lib_init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>disconnect</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, socket.o(.text.disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = disconnect &rArr; close &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
</UL>

<P><STRONG><a name="[dd]"></a>disk_initialize</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, mmcstm32.o(.text.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = disk_initialize &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_rw
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[df]"></a>disk_read</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, mmcstm32.o(.text.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = disk_read &rArr; rcvr_datablock &rArr; stm32_wizchip_dma_transfer &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_datablock
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[f2]"></a>disk_status</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mmcstm32.o(.text.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[a1]"></a>disk_timerproc</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, mmcstm32.o(.text.disk_timerproc))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>disk_write</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, mmcstm32.o(.text.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = disk_write &rArr; xmit_datablock &rArr; stm32_wizchip_dma_transfer &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_datablock
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[e2]"></a>display_reg_webContent_list</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, httpserver.o(.text.display_reg_webContent_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = display_reg_webContent_list &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadwebpages
</UL>

<P><STRONG><a name="[a3]"></a>f_getfree</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, ff.o(.text.f_getfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; stm32_wizchip_dma_transfer &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_FATFS_GetDriveSize
</UL>

<P><STRONG><a name="[e6]"></a>f_mount</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, ff.o(.text.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; stm32_wizchip_dma_transfer &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>f_opendir</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(.text.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; stm32_wizchip_dma_transfer &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_FATFS_GetDriveSize
</UL>

<P><STRONG><a name="[a5]"></a>f_readdir</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ff.o(.text.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; stm32_wizchip_dma_transfer &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_FATFS_GetDriveSize
</UL>

<P><STRONG><a name="[14d]"></a>ff_oem2uni</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffunicode.o(.text.ff_oem2uni))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
</UL>

<P><STRONG><a name="[f4]"></a>ff_uni2oem</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ffunicode.o(.text.ff_uni2oem))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[da]"></a>ff_wtoupper</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, ffunicode.o(.text.ff_wtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[ec]"></a>findEntry</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, snmp.o(.text.findEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = findEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseVarBind
</UL>

<P><STRONG><a name="[ee]"></a>find_http_uri_type</STRONG> (Thumb, 652 bytes, Stack size 16 bytes, httpparser.o(.text.find_http_uri_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = find_http_uri_type &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
</UL>

<P><STRONG><a name="[f0]"></a>find_userReg_webContent</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, httpserver.o(.text.find_userReg_webContent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = find_userReg_webContent &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
</UL>

<P><STRONG><a name="[5b]"></a>fputc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[f7]"></a>getEntry</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, snmp.o(.text.getEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseVarBind
</UL>

<P><STRONG><a name="[133]"></a>getOID</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, snmp.o(.text.getOID))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseVarBind
</UL>

<P><STRONG><a name="[8e]"></a>getSn_RX_RSR</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, w5500.o(.text.getSn_RX_RSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getSn_RX_RSR &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpd_run
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNTP_run
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTPUDP
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>

<P><STRONG><a name="[f8]"></a>getSn_TX_FSR</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, w5500.o(.text.getSn_TX_FSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getSn_TX_FSR &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>

<P><STRONG><a name="[142]"></a>getValue</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, snmp.o(.text.getValue))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setEntry
</UL>

<P><STRONG><a name="[9]"></a>get_LEDStatus_all</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, snmp_custom.o(.text.get_LEDStatus_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_LEDStatus_all &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> snmp_custom.o(.data.snmpData)
</UL>
<P><STRONG><a name="[13d]"></a>get_S2E_Packet_pointer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, configdata.o(.text.get_S2E_Packet_pointer))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_basic_config_setting
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveip
</UL>

<P><STRONG><a name="[fa]"></a>get_http_param_value</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, httpparser.o(.text.get_http_param_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = get_http_param_value &rArr; mid &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unescape_http_url
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mid
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATOI
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_diostate
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_diodir
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_basic_config_setting
</UL>

<P><STRONG><a name="[ff]"></a>get_http_uri_name</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, httpparser.o(.text.get_http_uri_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_http_uri_name &rArr; strtok
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
</UL>

<P><STRONG><a name="[103]"></a>httpServer_Sockinit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, httpserver.o(.text.httpServer_Sockinit))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_init
</UL>

<P><STRONG><a name="[102]"></a>httpServer_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, httpserver.o(.text.httpServer_init))
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_Sockinit
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadwebpages
</UL>

<P><STRONG><a name="[47]"></a>httpServer_run</STRONG> (Thumb, 1304 bytes, Stack size 576 bytes, httpserver.o(.text.httpServer_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = httpServer_run &rArr; http_get_cgi_handler &rArr; predefined_get_cgi_processor &rArr; make_json_netinfo &rArr; ctlnetwork &rArr; wizchip_setnetmode &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_post_cgi_handler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_cgi_handler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_userReg_webContent
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_header
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_cgi
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_body
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHTTPSequenceNum
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_http_request
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mid
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_uri_name
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_http_uri_type
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.networkSevices)
</UL>
<P><STRONG><a name="[10a]"></a>http_get_cgi_handler</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, httputil.o(.text.http_get_cgi_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = http_get_cgi_handler &rArr; predefined_get_cgi_processor &rArr; make_json_netinfo &rArr; ctlnetwork &rArr; wizchip_setnetmode &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;predefined_get_cgi_processor
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_json_serial_data
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
</UL>

<P><STRONG><a name="[10c]"></a>http_post_cgi_handler</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, httputil.o(.text.http_post_cgi_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = http_post_cgi_handler &rArr; predefined_set_cgi_processor &rArr; set_diostate &rArr; get_http_param_value &rArr; mid &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_basic_config_setting
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveip
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;predefined_set_cgi_processor
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_cgi_basic_config_response_page
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
</UL>

<P><STRONG><a name="[114]"></a>inet_addr_</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, httpparser.o(.text.inet_addr_))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = inet_addr_ &rArr; ATOI
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATOI
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_basic_config_setting
</UL>

<P><STRONG><a name="[143]"></a>initTable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, snmp_custom.o(.text.initTable))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpd_init
</UL>

<P><STRONG><a name="[115]"></a>initial_Trap</STRONG> (Thumb, 60 bytes, Stack size 112 bytes, snmp_custom.o(.text.initial_Trap))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = initial_Trap &rArr; snmp_sendTrap &rArr; sendto &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmp_sendTrap
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpd_init
</UL>

<P><STRONG><a name="[12d]"></a>insertRespLen</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, snmp.o(.text.insertRespLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = insertRespLen
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSequenceOf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSequence
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSNMPMessage
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseRequest
</UL>

<P><STRONG><a name="[108]"></a>listen</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, socket.o(.text.listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = listen &rArr; close &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
</UL>

<P><STRONG><a name="[117]"></a>loadwebpages</STRONG> (Thumb, 344 bytes, Stack size 8 bytes, main.o(.text.loadwebpages))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = loadwebpages &rArr; display_reg_webContent_list &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_httpServer_cbfunc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_reg_webContent_list
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f]"></a>main</STRONG> (Thumb, 268 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = main &rArr; TM_FATFS_GetDriveSize &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; stm32_wizchip_dma_transfer &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_lib_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_eeprom
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_eeprom_stm32
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpd_init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpserverdefaultconfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;networkSevices
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadwebpages
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Configuration
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_FATFS_GetDriveSize
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNTP_run
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNTP_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_config
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[122]"></a>makeTrapVariableBindings</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, snmp.o(.text.makeTrapVariableBindings))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = makeTrapVariableBindings
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmp_sendTrap
</UL>

<P><STRONG><a name="[113]"></a>make_cgi_basic_config_response_page</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, httputil.o(.text.make_cgi_basic_config_response_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = make_cgi_basic_config_response_page &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_post_cgi_handler
</UL>

<P><STRONG><a name="[123]"></a>make_http_response_head</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, httpparser.o(.text.make_http_response_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = make_http_response_head &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_header
</UL>

<P><STRONG><a name="[125]"></a>make_json_ain</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, httputil.o(.text.make_json_ain))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = make_json_ain &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;predefined_get_cgi_processor
</UL>

<P><STRONG><a name="[126]"></a>make_json_dio</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, httputil.o(.text.make_json_dio))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = make_json_dio &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;predefined_get_cgi_processor
</UL>

<P><STRONG><a name="[127]"></a>make_json_netinfo</STRONG> (Thumb, 208 bytes, Stack size 192 bytes, httputil.o(.text.make_json_netinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = make_json_netinfo &rArr; ctlnetwork &rArr; wizchip_setnetmode &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;predefined_get_cgi_processor
</UL>

<P><STRONG><a name="[10f]"></a>make_json_serial_data</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, httputil.o(.text.make_json_serial_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = make_json_serial_data &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_cgi_handler
</UL>

<P><STRONG><a name="[fb]"></a>mid</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, httpparser.o(.text.mid))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mid &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_param_value
</UL>

<P><STRONG><a name="[121]"></a>networkSevices</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, main.o(.text.networkSevices))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = networkSevices &rArr; snmpd_run &rArr; parseSNMPMessage &rArr; parseVersion &rArr; parseCommunity &rArr; parseRequest &rArr; parseSequenceOf &rArr; parseSequence &rArr; parseVarBind &rArr; findEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpd_run
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklink
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTPUDP
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11f]"></a>ntpserverdefaultconfig</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ntpserver.o(.text.ntpserverdefaultconfig))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[129]"></a>parseCommunity</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, snmp.o(.text.parseCommunity))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = parseCommunity &rArr; parseRequest &rArr; parseSequenceOf &rArr; parseSequence &rArr; parseVarBind &rArr; findEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseTLV
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseRequest
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseVersion
</UL>

<P><STRONG><a name="[132]"></a>parseLength</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, snmp.o(.text.parseLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = parseLength
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseTLV
</UL>

<P><STRONG><a name="[12b]"></a>parseRequest</STRONG> (Thumb, 332 bytes, Stack size 104 bytes, snmp.o(.text.parseRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = parseRequest &rArr; parseSequenceOf &rArr; parseSequence &rArr; parseVarBind &rArr; findEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseTLV
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSequenceOf
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertRespLen
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseCommunity
</UL>

<P><STRONG><a name="[12e]"></a>parseSNMPMessage</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, snmp.o(.text.parseSNMPMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = parseSNMPMessage &rArr; parseVersion &rArr; parseCommunity &rArr; parseRequest &rArr; parseSequenceOf &rArr; parseSequence &rArr; parseVarBind &rArr; findEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseVersion
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseTLV
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertRespLen
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpd_run
</UL>

<P><STRONG><a name="[130]"></a>parseSequence</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, snmp.o(.text.parseSequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = parseSequence &rArr; parseVarBind &rArr; findEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseVarBind
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseTLV
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertRespLen
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSequenceOf
</UL>

<P><STRONG><a name="[12c]"></a>parseSequenceOf</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, snmp.o(.text.parseSequenceOf))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = parseSequenceOf &rArr; parseSequence &rArr; parseVarBind &rArr; findEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseTLV
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSequence
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertRespLen
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseRequest
</UL>

<P><STRONG><a name="[48]"></a>parseTLV</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, snmp.o(.text.parseTLV))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = parseTLV &rArr; parseLength
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseLength
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseVersion
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseVarBind
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSequenceOf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSequence
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSNMPMessage
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseRequest
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseCommunity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> snmp.o(.text.parseRequest)
</UL>
<P><STRONG><a name="[131]"></a>parseVarBind</STRONG> (Thumb, 464 bytes, Stack size 80 bytes, snmp.o(.text.parseVarBind))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = parseVarBind &rArr; findEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setEntry
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseTLV
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOID
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEntry
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findEntry
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSequence
</UL>

<P><STRONG><a name="[12f]"></a>parseVersion</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, snmp.o(.text.parseVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = parseVersion &rArr; parseCommunity &rArr; parseRequest &rArr; parseSequenceOf &rArr; parseSequence &rArr; parseVarBind &rArr; findEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseTLV
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseCommunity
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSNMPMessage
</UL>

<P><STRONG><a name="[105]"></a>parse_http_request</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, httpparser.o(.text.parse_http_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = parse_http_request &rArr; strtok
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
</UL>

<P><STRONG><a name="[10e]"></a>predefined_get_cgi_processor</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, httputil.o(.text.predefined_get_cgi_processor))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = predefined_get_cgi_processor &rArr; make_json_netinfo &rArr; ctlnetwork &rArr; wizchip_setnetmode &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_json_netinfo
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_json_dio
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_json_ain
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_cgi_handler
</UL>

<P><STRONG><a name="[110]"></a>predefined_set_cgi_processor</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, httputil.o(.text.predefined_set_cgi_processor))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = predefined_set_cgi_processor &rArr; set_diostate &rArr; get_http_param_value &rArr; mid &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_diostate
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_diodir
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_post_cgi_handler
</UL>

<P><STRONG><a name="[139]"></a>read_userReg_webContent</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, httpserver.o(.text.read_userReg_webContent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = read_userReg_webContent &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_body
</UL>

<P><STRONG><a name="[104]"></a>recv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, socket.o(.text.recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = recv &rArr; wiz_recv_data &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
</UL>

<P><STRONG><a name="[8f]"></a>recvfrom</STRONG> (Thumb, 552 bytes, Stack size 56 bytes, socket.o(.text.recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = recvfrom &rArr; wiz_recv_data &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_ignore
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpd_run
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNTP_run
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTPUDP
</UL>

<P><STRONG><a name="[118]"></a>reg_httpServer_cbfunc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, httpserver.o(.text.reg_httpServer_cbfunc))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadwebpages
</UL>

<P><STRONG><a name="[46]"></a>reg_httpServer_webContent</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, httpserver.o(.text.reg_httpServer_webContent))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = reg_httpServer_webContent &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.loadwebpages)
</UL>
<P><STRONG><a name="[14e]"></a>reg_wizchip_cs_cbfunc</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, wizchip_conf.o(.text.reg_wizchip_cs_cbfunc))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_lib_init
</UL>

<P><STRONG><a name="[14f]"></a>reg_wizchip_spi_cbfunc</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, wizchip_conf.o(.text.reg_wizchip_spi_cbfunc))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_lib_init
</UL>

<P><STRONG><a name="[150]"></a>reg_wizchip_spiburst_cbfunc</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, wizchip_conf.o(.text.reg_wizchip_spiburst_cbfunc))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_lib_init
</UL>

<P><STRONG><a name="[112]"></a>saveip</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, httputil.o(.text.saveip))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = saveip &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_S2E_Packet_pointer
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_post_cgi_handler
</UL>

<P><STRONG><a name="[140]"></a>send</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, socket.o(.text.send))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = send &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_header
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_cgi
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_body
</UL>

<P><STRONG><a name="[90]"></a>sendto</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, socket.o(.text.sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sendto &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpd_run
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNTP_run
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTPUDP
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmp_sendTrap
</UL>

<P><STRONG><a name="[134]"></a>setEntry</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, snmp.o(.text.setEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getValue
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseVarBind
</UL>

<P><STRONG><a name="[111]"></a>set_basic_config_setting</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, httputil.o(.text.set_basic_config_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = set_basic_config_setting &rArr; get_http_param_value &rArr; mid &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr_
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_param_value
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_S2E_Packet_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_post_cgi_handler
</UL>

<P><STRONG><a name="[135]"></a>set_diodir</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, httputil.o(.text.set_diodir))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = set_diodir &rArr; get_http_param_value &rArr; mid &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_param_value
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATOI
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;predefined_set_cgi_processor
</UL>

<P><STRONG><a name="[136]"></a>set_diostate</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, httputil.o(.text.set_diostate))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = set_diostate &rArr; get_http_param_value &rArr; mid &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_param_value
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATOI
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;predefined_set_cgi_processor
</UL>

<P><STRONG><a name="[116]"></a>snmp_sendTrap</STRONG> (Thumb, 324 bytes, Stack size 56 bytes, snmp.o(.text.snmp_sendTrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = snmp_sendTrap &rArr; sendto &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeTrapVariableBindings
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_Trap
</UL>

<P><STRONG><a name="[120]"></a>snmpd_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, snmp.o(.text.snmpd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = snmpd_init &rArr; initial_Trap &rArr; snmp_sendTrap &rArr; sendto &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_Trap
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTable
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[128]"></a>snmpd_run</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, snmp.o(.text.snmpd_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = snmpd_run &rArr; parseSNMPMessage &rArr; parseVersion &rArr; parseCommunity &rArr; parseRequest &rArr; parseSequenceOf &rArr; parseSequence &rArr; parseVarBind &rArr; findEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSNMPMessage
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;networkSevices
</UL>

<P><STRONG><a name="[92]"></a>socket</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, socket.o(.text.socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = socket &rArr; close &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpd_run
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNTP_run
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTPUDP
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmp_sendTrap
</UL>

<P><STRONG><a name="[4e]"></a>stm32_spi_rw</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, spiconfig.o(.text.stm32_spi_rw))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stm32_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_deselect
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_datablock
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ready
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_datablock
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mmcstm32.o(.text.xmit_datablock)
<LI> mmcstm32.o(.text.send_cmd)
</UL>
<P><STRONG><a name="[138]"></a>stm32_wizchip_dma_transfer</STRONG> (Thumb, 216 bytes, Stack size 80 bytes, spiconfig.o(.text.stm32_wizchip_dma_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = stm32_wizchip_dma_transfer &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DMACmd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_writeburst
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_readburst
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_datablock
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_datablock
</UL>

<P><STRONG><a name="[11a]"></a>sw_eeprom_stm32</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main.o(.text.sw_eeprom_stm32))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sw_eeprom_stm32 &rArr; EE_Init &rArr; EE_VerifyPageFullWriteVariable &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11b]"></a>test_eeprom</STRONG> (Thumb, 408 bytes, Stack size 48 bytes, main.o(.text.test_eeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = test_eeprom &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fe]"></a>unescape_http_url</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, httpparser.o(.text.unescape_http_url))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = unescape_http_url
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2D
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_param_value
</UL>

<P><STRONG><a name="[11d]"></a>w5500_lib_init</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, w5500init.o(.text.w5500_lib_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = w5500_lib_init &rArr; Net_Conf &rArr; Display_Net_Conf &rArr; ctlwizchip &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_wizchip_spiburst_cbfunc
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_wizchip_spi_cbfunc
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_wizchip_cs_cbfunc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Conf
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>wiz_recv_data</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, w5500.o(.text.wiz_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wiz_recv_data &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>

<P><STRONG><a name="[13b]"></a>wiz_recv_ignore</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, w5500.o(.text.wiz_recv_ignore))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wiz_recv_ignore &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL>

<P><STRONG><a name="[141]"></a>wiz_send_data</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, w5500.o(.text.wiz_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[6]"></a>wizchip_bus_readdata</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wizchip_conf.o(.text.wizchip_bus_readdata))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.data.WIZCHIP)
</UL>
<P><STRONG><a name="[7]"></a>wizchip_bus_writedata</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wizchip_conf.o(.text.wizchip_bus_writedata))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.data.WIZCHIP)
</UL>
<P><STRONG><a name="[c8]"></a>wizchip_clrinterrupt</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wizchip_conf.o(.text.wizchip_clrinterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_clrinterrupt &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[2]"></a>wizchip_cris_enter</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(.text.wizchip_cris_enter))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.data.WIZCHIP)
</UL>
<P><STRONG><a name="[3]"></a>wizchip_cris_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(.text.wizchip_cris_exit))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.data.WIZCHIP)
</UL>
<P><STRONG><a name="[5]"></a>wizchip_cs_deselect</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(.text.wizchip_cs_deselect))
<BR>[Address Reference Count : 2]<UL><LI> wizchip_conf.o(.text.reg_wizchip_cs_cbfunc)
<LI> wizchip_conf.o(.data.WIZCHIP)
</UL>
<P><STRONG><a name="[4]"></a>wizchip_cs_select</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(.text.wizchip_cs_select))
<BR>[Address Reference Count : 2]<UL><LI> wizchip_conf.o(.text.reg_wizchip_cs_cbfunc)
<LI> wizchip_conf.o(.data.WIZCHIP)
</UL>
<P><STRONG><a name="[c7]"></a>wizchip_getinterrupt</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wizchip_conf.o(.text.wizchip_getinterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_getinterrupt &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[ca]"></a>wizchip_getinterruptmask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wizchip_conf.o(.text.wizchip_getinterruptmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_getinterruptmask &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[c0]"></a>wizchip_getnetinfo</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, wizchip_conf.o(.text.wizchip_getnetinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wizchip_getnetinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[c2]"></a>wizchip_getnetmode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wizchip_conf.o(.text.wizchip_getnetmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wizchip_getnetmode &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[c4]"></a>wizchip_gettimeout</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wizchip_conf.o(.text.wizchip_gettimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wizchip_gettimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[c6]"></a>wizchip_init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, wizchip_conf.o(.text.wizchip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[53]"></a>wizchip_read</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, spiconfig.o(.text.wizchip_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wizchip_read
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5500init.o(.text.w5500_lib_init)
</UL>
<P><STRONG><a name="[55]"></a>wizchip_readburst</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spiconfig.o(.text.wizchip_readburst))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wizchip_readburst &rArr; stm32_wizchip_dma_transfer &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_wizchip_dma_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5500init.o(.text.w5500_lib_init)
</UL>
<P><STRONG><a name="[c9]"></a>wizchip_setinterruptmask</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wizchip_conf.o(.text.wizchip_setinterruptmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_setinterruptmask &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[bf]"></a>wizchip_setnetinfo</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, wizchip_conf.o(.text.wizchip_setnetinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wizchip_setnetinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[c1]"></a>wizchip_setnetmode</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wizchip_conf.o(.text.wizchip_setnetmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wizchip_setnetmode &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[c3]"></a>wizchip_settimeout</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wizchip_conf.o(.text.wizchip_settimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wizchip_settimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[4c]"></a>wizchip_spi_readburst</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(.text.wizchip_spi_readburst))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.text.reg_wizchip_spiburst_cbfunc)
</UL>
<P><STRONG><a name="[4a]"></a>wizchip_spi_readbyte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wizchip_conf.o(.text.wizchip_spi_readbyte))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.text.reg_wizchip_spi_cbfunc)
</UL>
<P><STRONG><a name="[4b]"></a>wizchip_spi_writeburst</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(.text.wizchip_spi_writeburst))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.text.reg_wizchip_spiburst_cbfunc)
</UL>
<P><STRONG><a name="[49]"></a>wizchip_spi_writebyte</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(.text.wizchip_spi_writebyte))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.text.reg_wizchip_spi_cbfunc)
</UL>
<P><STRONG><a name="[c5]"></a>wizchip_sw_reset</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, wizchip_conf.o(.text.wizchip_sw_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wizchip_sw_reset &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[54]"></a>wizchip_write</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, spiconfig.o(.text.wizchip_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wizchip_write
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5500init.o(.text.w5500_lib_init)
</UL>
<P><STRONG><a name="[56]"></a>wizchip_writeburst</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spiconfig.o(.text.wizchip_writeburst))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wizchip_writeburst &rArr; stm32_wizchip_dma_transfer &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_wizchip_dma_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5500init.o(.text.w5500_lib_init)
</UL>
<P><STRONG><a name="[cd]"></a>wizphy_getphyconf</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, wizchip_conf.o(.text.wizphy_getphyconf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizphy_getphyconf &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[d0]"></a>wizphy_getphylink</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wizchip_conf.o(.text.wizphy_getphylink))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizphy_getphylink &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[cf]"></a>wizphy_getphypmode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wizchip_conf.o(.text.wizphy_getphypmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizphy_getphypmode &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[cb]"></a>wizphy_reset</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, wizchip_conf.o(.text.wizphy_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizphy_reset &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphypmode
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphyconf
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[cc]"></a>wizphy_setphyconf</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, wizchip_conf.o(.text.wizphy_setphyconf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wizphy_setphyconf &rArr; wizphy_reset &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[ce]"></a>wizphy_setphypmode</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, wizchip_conf.o(.text.wizphy_setphypmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wizphy_setphypmode &rArr; wizphy_reset &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[91]"></a>wzn_event_handle</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ntpserver.o(.text.wzn_event_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wzn_event_handle &rArr; ctlwizchip &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTPUDP
</UL>

<P><STRONG><a name="[151]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[167]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[42]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpd_run
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;networkSevices
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_reg_webContent_list
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_FATFS_GetDriveSize
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNTP_run
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTPUDP
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wzn_event_handle
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Net_Conf
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_header
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_cgi
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_body
</UL>
<BR>[Address Reference Count : 3]<UL><LI> w5500init.o(.text.Display_Net_Conf)
<LI> httpserver.o(.text.display_reg_webContent_list)
<LI> httpserver.o(.text.httpServer_run)
</UL>
<P><STRONG><a name="[153]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[168]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[f9]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_LEDStatus_all
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;predefined_set_cgi_processor
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;predefined_get_cgi_processor
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_json_serial_data
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_json_netinfo
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_json_dio
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_json_ain
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_cgi_basic_config_response_page
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_cgi
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_http_response_head
</UL>

<P><STRONG><a name="[169]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[16a]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[16b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[13c]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_httpServer_webContent
</UL>

<P><STRONG><a name="[e3]"></a>puts</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_lib_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_eeprom
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_eeprom_stm32
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpd_init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_reg_webContent_list
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wzn_event_handle
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveip
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[44]"></a>__NVIC_SystemReset</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(.text.__NVIC_SystemReset))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.loadwebpages)
</UL>
<P><STRONG><a name="[52]"></a>wizchip_deselect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, w5500init.o(.text.wizchip_deselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wizchip_deselect &rArr; stm32_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_rw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5500init.o(.text.w5500_lib_init)
</UL>
<P><STRONG><a name="[51]"></a>wizchip_select</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, w5500init.o(.text.wizchip_select))
<BR>[Address Reference Count : 1]<UL><LI> w5500init.o(.text.w5500_lib_init)
</UL>
<P><STRONG><a name="[d1]"></a>deselect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mmcstm32.o(.text.deselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = deselect &rArr; stm32_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_rw
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>

<P><STRONG><a name="[e0]"></a>rcvr_datablock</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, mmcstm32.o(.text.rcvr_datablock))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rcvr_datablock &rArr; stm32_wizchip_dma_transfer &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_wizchip_dma_transfer
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_rw
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[13e]"></a>select</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mmcstm32.o(.text.select))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = select &rArr; wait_ready &rArr; stm32_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_rw
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ready
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>

<P><STRONG><a name="[de]"></a>send_cmd</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, mmcstm32.o(.text.send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_rw
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>

<P><STRONG><a name="[13f]"></a>wait_ready</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mmcstm32.o(.text.wait_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wait_ready &rArr; stm32_spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_rw
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_datablock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>

<P><STRONG><a name="[e1]"></a>xmit_datablock</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mmcstm32.o(.text.xmit_datablock))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xmit_datablock &rArr; stm32_wizchip_dma_transfer &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_wizchip_dma_transfer
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_rw
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[b7]"></a>check_fs</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, ff.o(.text.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; stm32_wizchip_dma_transfer &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[bb]"></a>chk_chr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ff.o(.text.chk_chr))
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>

<P><STRONG><a name="[d4]"></a>clst2sect</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ff.o(.text.clst2sect))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[bc]"></a>create_chain</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, ff.o(.text.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; stm32_wizchip_dma_transfer &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[d2]"></a>dir_clear</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(.text.dir_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dir_clear &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; stm32_wizchip_dma_transfer &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[d6]"></a>dir_find</STRONG> (Thumb, 364 bytes, Stack size 48 bytes, ff.o(.text.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; stm32_wizchip_dma_transfer &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[d9]"></a>dir_next</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, ff.o(.text.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; stm32_wizchip_dma_transfer &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[db]"></a>dir_read</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, ff.o(.text.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; stm32_wizchip_dma_transfer &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[d7]"></a>dir_sdi</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ff.o(.text.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; stm32_wizchip_dma_transfer &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[e4]"></a>find_volume</STRONG> (Thumb, 672 bytes, Stack size 56 bytes, ff.o(.text.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; stm32_wizchip_dma_transfer &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[e8]"></a>follow_path</STRONG> (Thumb, 760 bytes, Stack size 64 bytes, ff.o(.text.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; stm32_wizchip_dma_transfer &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_uni2oem
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[bd]"></a>get_fat</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, ff.o(.text.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; stm32_wizchip_dma_transfer &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[eb]"></a>get_fileinfo</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, ff.o(.text.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_fileinfo
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_uni2oem
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[e7]"></a>get_ldnumber</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ff.o(.text.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[e9]"></a>ld_clust</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ff.o(.text.ld_clust))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[e5]"></a>ld_dword</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ff.o(.text.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[b9]"></a>mem_cmp</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ff.o(.text.mem_cmp))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[b8]"></a>move_window</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ff.o(.text.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; stm32_wizchip_dma_transfer &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[be]"></a>put_fat</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, ff.o(.text.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; stm32_wizchip_dma_transfer &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[137]"></a>st_dword</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(.text.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[d8]"></a>sum_sfn</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ff.o(.text.sum_sfn))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[d3]"></a>sync_window</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ff.o(.text.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; stm32_wizchip_dma_transfer &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[f3]"></a>tchar2uni</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ff.o(.text.tchar2uni))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tchar2uni
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_oem2uni
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[ea]"></a>validate</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ff.o(.text.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[72]"></a>C2D</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, httpparser.o(.text.C2D))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unescape_http_url
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATOI
</UL>

<P><STRONG><a name="[107]"></a>getHTTPSequenceNum</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, httpserver.o(.text.getHTTPSequenceNum))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_body
</UL>

<P><STRONG><a name="[109]"></a>send_http_response_body</STRONG> (Thumb, 472 bytes, Stack size 40 bytes, httpserver.o(.text.send_http_response_body))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = send_http_response_body &rArr; send &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_userReg_webContent
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHTTPSequenceNum
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
</UL>

<P><STRONG><a name="[10b]"></a>send_http_response_cgi</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, httpserver.o(.text.send_http_response_cgi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = send_http_response_cgi &rArr; send &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
</UL>

<P><STRONG><a name="[10d]"></a>send_http_response_header</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, httpserver.o(.text.send_http_response_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = send_http_response_header &rArr; send &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_http_response_head
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
</UL>

<P><STRONG><a name="[7b]"></a>EE_FindValidPage</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, eeprom_stm.o(.text.EE_FindValidPage))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable
</UL>

<P><STRONG><a name="[76]"></a>EE_Format</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, eeprom_stm.o(.text.EE_Format))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EE_Format &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
</UL>

<P><STRONG><a name="[7a]"></a>EE_VerifyPageFullWriteVariable</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, eeprom_stm.o(.text.EE_VerifyPageFullWriteVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EE_VerifyPageFullWriteVariable &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_FindValidPage
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteVariable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
</UL>

<P><STRONG><a name="[152]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[155]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[154]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5c]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
